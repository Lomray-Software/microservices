<component name="ProjectRunConfigurationManager">
  <configuration default="false" name="configuration" type="NodeJSConfigurationType" folderName="microservices" node-parameters="--require ts-node/register" path-to-js-file="src/index.ts" working-dir="$PROJECT_DIR$/microservices/configuration">
    <envs>
      <env name="MS_CONFIGS" value="[{&quot;microservice&quot;:&quot;*&quot;,&quot;type&quot;:&quot;db&quot;,&quot;params&quot;:{&quot;host&quot;:&quot;127.0.0.1&quot;,&quot;port&quot;:5432,&quot;username&quot;:&quot;postgres&quot;,&quot;password&quot;:&quot;example&quot;}},{&quot;microservice&quot;:&quot;authentication&quot;,&quot;type&quot;:&quot;config&quot;,&quot;params&quot;:{&quot;jwtOptions&quot;:{&quot;secretKey&quot;:&quot;DemoSecretKey&quot;}}},{&quot;microservice&quot;:&quot;notification&quot;,&quot;type&quot;:&quot;emailTransportOptions&quot;,&quot;params&quot;:{&quot;defaultEmailFrom&quot;:&quot;change@me.com&quot;,&quot;transportOptions&quot;:{&quot;host&quot;:&quot;smtp.ethereal.email&quot;,&quot;port&quot;:587,&quot;secure&quot;:false,&quot;auth&quot;:{&quot;user&quot;:&quot;generated ethereal user&quot;,&quot;pass&quot;:&quot;generated ethereal password&quot;}}}}]" />
      <env name="MS_MIDDLEWARES" value="[{&quot;target&quot;:&quot;gateway&quot;,&quot;targetMethod&quot;:&quot;*&quot;,&quot;sender&quot;:&quot;authentication&quot;,&quot;senderMethod&quot;:&quot;token.identify&quot;,&quot;type&quot;:&quot;request&quot;,&quot;params&quot;:{&quot;type&quot;:&quot;request&quot;,&quot;isRequired&quot;:true,&quot;exclude&quot;:[&quot;users.user.sign-in&quot;,&quot;identity-provider.sign-in&quot;],&quot;strategy&quot;:&quot;transform&quot;,&quot;convertResult&quot;:{&quot;payload.authentication.userId&quot;:&quot;$middleware.userId&quot;,&quot;payload.authentication.isAuth&quot;:&quot;$middleware.isAuth&quot;,&quot;payload.authentication.provider&quot;:&quot;$middleware.provider&quot;}}},{&quot;target&quot;:&quot;gateway&quot;,&quot;targetMethod&quot;:&quot;*&quot;,&quot;sender&quot;:&quot;authorization&quot;,&quot;senderMethod&quot;:&quot;endpoint.enforce&quot;,&quot;type&quot;:&quot;request&quot;,&quot;params&quot;:{&quot;type&quot;:&quot;request&quot;,&quot;isRequired&quot;:true,&quot;isCleanResult&quot;:true,&quot;strategy&quot;:&quot;transform&quot;,&quot;reqParams&quot;:{&quot;isInternal&quot;:true},&quot;convertParams&quot;:{&quot;userId&quot;:&quot;$task.params.payload.authentication.userId&quot;,&quot;method&quot;:&quot;$task.method&quot;,&quot;filterInput&quot;:&quot;$task.params&quot;},&quot;convertResult&quot;:{&quot;.&quot;:&quot;$middleware.filteredInput&quot;,&quot;payload&quot;:&quot;$task.params.payload&quot;,&quot;payload.authorization.isAllow&quot;:&quot;$middleware.isAllow&quot;,&quot;payload.authorization.roles&quot;:&quot;$middleware.roles&quot;,&quot;payload.authorization.filter&quot;:&quot;$middleware.filters&quot;}}},{&quot;target&quot;:&quot;gateway&quot;,&quot;targetMethod&quot;:&quot;*&quot;,&quot;sender&quot;:&quot;authorization&quot;,&quot;senderMethod&quot;:&quot;endpoint.filter&quot;,&quot;type&quot;:&quot;response&quot;,&quot;params&quot;:{&quot;type&quot;:&quot;response&quot;,&quot;isRequired&quot;:true,&quot;isCleanResult&quot;:true,&quot;strategy&quot;:&quot;transform&quot;,&quot;reqParams&quot;:{&quot;isInternal&quot;:true},&quot;convertParams&quot;:{&quot;type&quot;:&quot;out&quot;,&quot;userId&quot;:&quot;$task.params.payload.authentication.userId&quot;,&quot;method&quot;:&quot;$task.method&quot;,&quot;filterInput&quot;:&quot;$result&quot;},&quot;convertResult&quot;:{&quot;.&quot;:&quot;$middleware.filtered&quot;}}},{&quot;target&quot;:&quot;users&quot;,&quot;targetMethod&quot;:&quot;identity-provider.sign-in&quot;,&quot;sender&quot;:&quot;authentication&quot;,&quot;senderMethod&quot;:&quot;token.create&quot;,&quot;type&quot;:&quot;response&quot;,&quot;params&quot;:{&quot;type&quot;:&quot;response&quot;,&quot;isRequired&quot;:true,&quot;strategy&quot;:&quot;transform&quot;,&quot;convertParams&quot;:{&quot;type&quot;:&quot;jwt&quot;,&quot;userId&quot;:&quot;$result.user.id&quot;,&quot;returnType&quot;:&quot;cookies&quot;},&quot;convertResult&quot;:{&quot;payload.cookies&quot;:&quot;$middleware.payload.cookies&quot;,&quot;tokens.refresh&quot;:&quot;$middleware.refresh&quot;}}},{&quot;target&quot;:&quot;users&quot;,&quot;targetMethod&quot;:&quot;user.sign-in&quot;,&quot;sender&quot;:&quot;authentication&quot;,&quot;senderMethod&quot;:&quot;token.create&quot;,&quot;type&quot;:&quot;response&quot;,&quot;params&quot;:{&quot;type&quot;:&quot;response&quot;,&quot;isRequired&quot;:true,&quot;strategy&quot;:&quot;transform&quot;,&quot;convertParams&quot;:{&quot;type&quot;:&quot;jwt&quot;,&quot;userId&quot;:&quot;$result.user.id&quot;,&quot;returnType&quot;:&quot;cookies&quot;},&quot;convertResult&quot;:{&quot;payload.cookies&quot;:&quot;$middleware.payload.cookies&quot;,&quot;tokens.refresh&quot;:&quot;$middleware.refresh&quot;}}},{&quot;target&quot;:&quot;users&quot;,&quot;targetMethod&quot;:&quot;user.sign-up&quot;,&quot;sender&quot;:&quot;authentication&quot;,&quot;senderMethod&quot;:&quot;token.create&quot;,&quot;type&quot;:&quot;response&quot;,&quot;params&quot;:{&quot;type&quot;:&quot;response&quot;,&quot;isRequired&quot;:true,&quot;strategy&quot;:&quot;transform&quot;,&quot;convertParams&quot;:{&quot;type&quot;:&quot;jwt&quot;,&quot;userId&quot;:&quot;$result.user.id&quot;,&quot;returnType&quot;:&quot;cookies&quot;},&quot;convertResult&quot;:{&quot;payload.cookies&quot;:&quot;$middleware.payload.cookies&quot;,&quot;tokens.refresh&quot;:&quot;$middleware.refresh&quot;}}},{&quot;target&quot;:&quot;users&quot;,&quot;targetMethod&quot;:&quot;user.sign-out&quot;,&quot;sender&quot;:&quot;authentication&quot;,&quot;senderMethod&quot;:&quot;token.remove&quot;,&quot;type&quot;:&quot;response&quot;,&quot;params&quot;:{&quot;type&quot;:&quot;response&quot;,&quot;isRequired&quot;:true,&quot;strategy&quot;:&quot;transform&quot;,&quot;convertParams&quot;:{&quot;query.where.userId&quot;:&quot;$task.params.userId&quot;},&quot;convertResult&quot;:{&quot;payload.cookies.0.action&quot;:&quot;remove&quot;,&quot;payload.cookies.0.name&quot;:&quot;jwt-access&quot;}}}]" />
    </envs>
    <method v="2" />
  </configuration>
  <configuration default="false" name="configuration" type="mocha-javascript-test-runner" folderName="tests">
    <node-interpreter>project</node-interpreter>
    <node-options>--no-warnings</node-options>
    <mocha-package>$PROJECT_DIR$/node_modules/mocha</mocha-package>
    <working-directory>$PROJECT_DIR$/microservices/configuration</working-directory>
    <pass-parent-env>true</pass-parent-env>
    <envs>
      <env name="TS_NODE_COMPILER_OPTIONS" value="{&quot;target&quot;:&quot;es6&quot;}" />
      <env name="NODE_ENV" value="tests" />
    </envs>
    <ui>bdd</ui>
    <extra-mocha-options>--require ts-node/register --watch</extra-mocha-options>
    <test-kind>PATTERN</test-kind>
    <test-pattern>__tests__/**/*.ts</test-pattern>
    <method v="2" />
  </configuration>
</component>